name: Build & Publish buylist (POS → Pages)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

permissions:
  contents: write

concurrency:
  group: buylist-publish
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl pillow requests

      # ▼ ここが「robust + sanitize」版の Fetch ステップ
      - name: Fetch from POS (robust + sanitize)
        id: fetch
        env:
          POS_FILE_URL:       ${{ secrets.POS_FILE_URL }}        # 例: https://pos.mycalinks.com/api/...
          POS_COOKIE:         ${{ secrets.POS_COOKIE }}          # DevTools→Network の Cookie 1行
          POS_AUTH_HEADER:    ${{ secrets.POS_AUTH_HEADER }}     # 任意: Authorization: Bearer xxx
          POS_X_CSRF_HEADER:  ${{ secrets.POS_X_CSRF_HEADER }}   # 任意: x-csrf-token: yyy
        shell: bash
        run: |
          set -eux
          mkdir -p data

          # --- URL/Cookie をサニタイズ ---
          URL_RAW="${POS_FILE_URL-}"
          URL="$(printf '%s' "$URL_RAW" | tr -d '\r\n')"
          URL="$(printf '%s' "$URL" | sed -e 's/^[[:space:]]\+//' -e 's/[[:space:]]\+$//')"
          URL="${URL%\"}"; URL="${URL#\"}"; URL="${URL%\'}"; URL="${URL#\'}"
          URL="$(printf '%s' "$URL" | sed -e 's/\^&/\&/g' -e 's/\^//g')"

          COOKIE_RAW="${POS_COOKIE-}"
          COOKIE="$(printf '%s' "$COOKIE_RAW" | tr -d '\r\n')"

          if ! printf '%s' "$URL" | grep -Eq '^https?://'; then
            echo "::error::POS_FILE_URL が不正です（http/https で始まっていません）"
            exit 1
          fi

          echo "::add-mask::$URL"
          echo "::add-mask::$COOKIE"
          [ -n "${POS_AUTH_HEADER-}" ]   && echo "::add-mask::${POS_AUTH_HEADER}"
          [ -n "${POS_X_CSRF_HEADER-}" ] && echo "::add-mask::${POS_X_CSRF_HEADER}"

          # --- ヘッダ準備 ---
          UA="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/139 Safari/537.36"
          H=()
          H+=(-H "User-Agent: ${UA}")
          H+=(-H "Accept: */*")
          H+=(-H "Accept-Language: ja,en-US;q=0.9,en;q=0.8")
          H+=(-H "Content-Type: application/json")
          H+=(-H "Referer: https://pos.mycalinks.com/")
          H+=(-H "Origin: https://pos.mycalinks.com")
          [ -n "${COOKIE}" ]              && H+=(-H "Cookie: ${COOKIE}")
          [ -n "${POS_AUTH_HEADER-}" ]    && H+=(-H "${POS_AUTH_HEADER}")
          [ -n "${POS_X_CSRF_HEADER-}" ]  && H+=(-H "${POS_X_CSRF_HEADER}")

          # --- 取得（Content-Type で保存先振り分け） ---
          curl -g -fL -sS -D data/headers.txt "${H[@]}" "$URL" -o data/raw.bin

          ctype="$(grep -i '^content-type:' data/headers.txt | tail -1 | sed -E 's/^[^:]+:\s*//I' | tr '[:upper:]' '[:lower:]' | cut -d';' -f1 || true)"
          echo "Detected Content-Type: ${ctype:-unknown}"

          if echo "$ctype" | grep -q 'application/json'; then
            mv data/raw.bin data/items.json
          elif echo "$ctype" | grep -Eq 'application/(vnd\.openxmlformats-officedocument\.spreadsheetml\.sheet|octet-stream)'; then
            mv data/raw.bin data/buylist.xlsx
          elif echo "$ctype" | grep -Eq 'text/csv|application/csv'; then
            mv data/raw.bin data/buylist.csv
          else
            if head -c 1 data/raw.bin | grep -q '{'; then
              mv data/raw.bin data/items.json
            else
              mv data/raw.bin data/buylist.xlsx
            fi
          fi

          ls -l data

      # JSON だった場合は CSV に変換（汎用フラット）
      - name: Convert JSON to CSV (generic)
        if: hashFiles('data/items.json') != ''
        shell: bash
        run: |
          python - <<'PY'
          import json, pandas as pd
          from pandas import json_normalize
          import pathlib
          p = pathlib.Path("data/items.json")
          data = json.load(p.open())
          if isinstance(data, dict):
            for key in ("items","data","products","result","value"):
              if key in data and isinstance(data[key], list):
                data = data[key]; break
          if not isinstance(data, list):
            data = [data]
          df = json_normalize(data, sep=".")
          df.to_csv("data/buylist.csv", index=False, encoding="utf-8")
          print(f"Wrote data/buylist.csv rows={len(df)} cols={len(df.columns)}")
          PY
          ls -l data

      - name: Build static pages
        env:
          OUT_DIR: docs
          PER_PAGE: "80"
          BUILD_THUMBS: "0"
        shell: bash
        run: |
          set -eux
          INPUT=""
          for p in data/buylist.xlsx data/buylist.csv buylist.xlsx buylist.csv; do
            if [ -f "$p" ]; then INPUT="$p"; break; fi
          done
          if [ -z "$INPUT" ]; then
            echo "::error::入力データがありません（POS取得失敗 & リポジトリにも無い）"; exit 1
          fi
          python gen_buylist.py "$INPUT"

      - name: Commit & push docs
        shell: bash
        run: |
          set -eux
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A docs
          if git diff --cached --quiet; then
            echo "No changes in docs/"
          else
            git commit -m "update buylist (auto)"
            git push
          fi
