      - name: Fetch from POS (paginate)
        env:
          POS_FILE_URL:       ${{ secrets.POS_FILE_URL }}
          POS_COOKIE:         ${{ secrets.POS_COOKIE }}
          POS_AUTH_HEADER:    ${{ secrets.POS_AUTH_HEADER }}
          POS_X_CSRF_HEADER:  ${{ secrets.POS_X_CSRF_HEADER }}
          POS_MAX_PAGES:      50
          POS_PAGE_SIZE:      100
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Force -Path data | Out-Null

          function Sanitize([string]$s){
            if ($null -eq $s) { return '' }
            ($s -replace "`r|`n",' ') -replace '\^&','&' -replace '\^','' | ForEach-Object { $_.Trim('"').Trim("'").Trim() }
          }

          function FirstNonEmpty([string[]]$vals){
            foreach($v in $vals){ if ($null -ne $v -and $v.Trim() -ne ''){ return $v } }
            return $null
          }

          $Url  = Sanitize $env:POS_FILE_URL
          if ($Url -notmatch '^https?://') { throw 'POS_FILE_URL must start with http/https' }
          $Cook = Sanitize $env:POS_COOKIE
          $Auth = Sanitize $env:POS_AUTH_HEADER
          $Csrf = Sanitize $env:POS_X_CSRF_HEADER

          Write-Output ("::add-mask::" + $Url)
          if ($Cook) { Write-Output ("::add-mask::" + $Cook) }
          if ($Auth) { Write-Output ("::add-mask::" + $Auth) }
          if ($Csrf) { Write-Output ("::add-mask::" + $Csrf) }

          Add-Type -AssemblyName System.Web
          function Set-Q([string]$u,[string]$k,[string]$v){
            $uri=[Uri]$u
            $qs=[System.Web.HttpUtility]::ParseQueryString($uri.Query)
            $qs.Set($k,$v)
            $b=[UriBuilder]::new($uri)
            $b.Query=$qs.ToString()
            $b.Uri.AbsoluteUri
          }

          $qs=[System.Web.HttpUtility]::ParseQueryString(([Uri]$Url).Query)
          $hasPage = ($qs.AllKeys -contains 'currentPage') -or ($Url -like '*/auth/*')
          $hasTS   = ((($qs['take'] -ne $null) -and ($qs['skip'] -ne $null)) -or ($Url -like '*/api/*'))

          # ---- PowerShell 5.1 互換：?? を使わない ----
          $pageSizeStr = FirstNonEmpty @($qs['itemsPerPage'], $qs['take'], $env:POS_PAGE_SIZE, '100')
          $pageSize = 0; [void][int]::TryParse($pageSizeStr, [ref]$pageSize); if ($pageSize -lt 1) { $pageSize = 100 }

          $startStr = FirstNonEmpty @($qs['currentPage'], '0')
          $start = 0; [void][int]::TryParse($startStr, [ref]$start); if ($start -lt 0) { $start = 0 }

          $maxPagesStr = FirstNonEmpty @($env:POS_MAX_PAGES, '50')
          $maxPages = 0; [void][int]::TryParse($maxPagesStr, [ref]$maxPages); if ($maxPages -lt 1) { $maxPages = 50 }

          # ---- headers ----
          $headers = @{
            'User-Agent'      = 'Mozilla/5.0'
            'Accept'          = '*/*'
            'Accept-Language' = 'ja,en-US;q=0.9,en;q=0.8'
            'Content-Type'    = 'application/json'
            'Referer'         = 'https://pos.mycalinks.com/'
            'Origin'          = 'https://pos.mycalinks.com'
          }
          if ($Cook) { $headers['Cookie'] = $Cook }
          if ($Auth) { $kv=$Auth.Split(':',2); if ($kv.Count -eq 2) { $headers[$kv[0].Trim()] = $kv[1].Trim() } }
          if ($Csrf) { $kv=$Csrf.Split(':',2); if ($kv.Count -eq 2) { $headers[$kv[0].Trim()] = $kv[1].Trim() } }

          $all = @()
          $prevHash = ''

          for ($i=$start; $i -lt $start + $maxPages; $i++) {
            if ($hasPage) {
              $u = Set-Q $Url 'currentPage' "$i"
              $u = Set-Q $u   'itemsPerPage' "$pageSize"
            } elseif ($hasTS) {
              $u = Set-Q $Url 'take' "$pageSize"
              $u = Set-Q $u   'skip' "$($i * $pageSize)"
            } else {
              $u = $Url
              if ($i -gt $start) { break }
            }

            $out = "data/raw_$i.bin"
            try {
              $resp = Invoke-WebRequest -Uri $u -Headers $headers -Method GET -MaximumRedirection 5 -OutFile $out -PassThru -ErrorAction Stop
              $code = [int]$resp.StatusCode
              $ct   = $resp.Headers['Content-Type']
            } catch {
              if ($_.Exception.Response) { $code=[int]$_.Exception.Response.StatusCode; $ct=$_.Exception.Response.ContentType } else { throw }
            }
            Write-Host "GET $u -> $code $ct"
            if ($code -ne 200) { break }

            $hash=(Get-FileHash -Algorithm MD5 $out).Hash
            if ($prevHash -and $prevHash -eq $hash) { break }
            $prevHash=$hash

            $json=$null
            if ("$ct" -match 'application/json') {
              try { $json = Get-Content $out -Raw | ConvertFrom-Json -ErrorAction Stop } catch {}
            } else {
              $html = Get-Content $out -Raw
              $m = [regex]::Match($html,'<script[^>]*id="__NEXT_DATA__"[^>]*>(.*?)</script>',[System.Text.RegularExpressions.RegexOptions]::Singleline)
              if ($m.Success) { try { $json = $m.Groups[1].Value | ConvertFrom-Json -ErrorAction Stop } catch {} }
            }

            $items=@()
            if ($json) {
              foreach($k in 'items','data','products','result','value') {
                if ($json.PSObject.Properties.Name -contains $k) {
                  $v=$json.$k
                  if ($v -is [System.Collections.IEnumerable]) { $items=@($v); break }
                }
              }
              if (-not $items -and ($json -is [System.Collections.IEnumerable])) { $items=@($json) }
            }

            if (-not $items -or $items.Count -eq 0) {
              if ($i -gt $start) { break } else { continue }
            }

            $all += $items
            if ($items.Count -lt $pageSize) { break }
          }

          $all | ConvertTo-Json -Depth 100 | Set-Content -Encoding UTF8 data/items.json
          Write-Host "Total items: $($all.Count)"
