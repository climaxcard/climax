name: Build & Publish buylist (Self-hosted Runner)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

permissions:
  contents: write

concurrency:
  group: buylist-publish
  cancel-in-progress: true

jobs:
  build:
    runs-on: [self-hosted, local]

    # 既定のシェルを Windows PowerShell に
    defaults:
      run:
        shell: powershell

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl pillow requests

      # ===== POS 取得（PowerShell 5.1 安全ラッパー） =====
      - name: Fetch from POS (powershell safe wrapper)
        id: fetch
        env:
          POS_FILE_URL:       ${{ secrets.POS_FILE_URL }}
          POS_COOKIE:         ${{ secrets.POS_COOKIE }}
          POS_AUTH_HEADER:    ${{ secrets.POS_AUTH_HEADER }}
          POS_X_CSRF_HEADER:  ${{ secrets.POS_X_CSRF_HEADER }}
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Force -Path data | Out-Null

          $script = @'
param(
  [string]$Url,
  [string]$Cookie,
  [string]$AuthHeader,
  [string]$CsrfHeader
)
$ErrorActionPreference = 'Stop'
New-Item -ItemType Directory -Force -Path data | Out-Null

# Sanitize URL/Cookie（改行・外側クォート・ ^ を除去）
$u = $Url; if (-not $u) { $u = '' }
$u = $u -replace '\r|\n',''
$u = $u.Trim('"').Trim("'").Trim()
$u = $u -replace '\^&','&' -replace '\^',''
if ($u -notmatch '^https?://') { throw 'POS_FILE_URL invalid (must start with http/https)' }

$c = $Cookie; if (-not $c) { $c = '' }
$c = $c -replace '\r|\n',''

Write-Output "::add-mask::$u"
if ($c) { Write-Output "::add-mask::$c" }
if ($AuthHeader) { Write-Output "::add-mask::$AuthHeader" }
if ($CsrfHeader) { Write-Output "::add-mask::$CsrfHeader" }

# ヘッダ（最小構成でクォート地雷回避）
$headers = New-Object 'System.Collections.Generic.Dictionary[String,String]'
$headers['User-Agent']      = 'Mozilla/5.0'
$headers['Accept']          = '*/*'
$headers['Accept-Language'] = 'ja,en-US;q=0.9,en;q=0.8'
$headers['Content-Type']    = 'application/json'
$headers['Referer']         = 'https://pos.mycalinks.com/'
$headers['Origin']          = 'https://pos.mycalinks.com'
if ($c) { $headers['Cookie'] = $c }

function Add-KVHeader($line) {
  if ([string]::IsNullOrWhiteSpace($line)) { return }
  $ix = $line.IndexOf(':')
  if ($ix -gt 0) {
    $k = $line.Substring(0,$ix).Trim()
    $v = $line.Substring($ix+1).Trim()
    if ($k -and $v) { $headers[$k] = $v }
  }
}
Add-KVHeader $AuthHeader
Add-KVHeader $CsrfHeader

$code = 0
try {
  $resp = Invoke-WebRequest -Uri $u -Headers $headers -Method GET -MaximumRedirection 5 -OutFile 'data\raw.bin' -ErrorAction Stop
  $code = ($resp.StatusCode) ? [int]$resp.StatusCode : 200
  $ct = ($resp.Headers['Content-Type']); if (-not $ct) { $ct = '' }
  Set-Content -Encoding ASCII -Path 'data\headers.txt' -Value ('content-type: ' + $ct)
}
catch {
  if ($_.Exception.Response) {
    $code = [int]$_.Exception.Response.StatusCode
    $ct = $_.Exception.Response.ContentType; if (-not $ct) { $ct = '' }
    Set-Content -Encoding ASCII -Path 'data\headers.txt' -Value ('content-type: ' + $ct)
    Copy-Item -Force 'data\raw.bin' 'data\error_body.bin' -ErrorAction SilentlyContinue
  } else { throw }
}

Write-Host ('HTTP ' + $code)
if ($code -ne 200) { throw ('HTTP ' + $code + ' (check headers.txt / error_body.bin)') }

# 保存先決定（Content-Type or 先頭バイト嗅ぎ）
$ctype = ''
if (Test-Path 'data\headers.txt') {
  $line = Get-Content 'data\headers.txt' | Select-Object -Last 1
  $ctype = ($line -replace '^[^:]+:\s*','').ToLower().Split(';')[0]
}
if ($ctype -match 'application/json') {
  Move-Item -Force 'data\raw.bin' 'data\items.json'
} elseif ($ctype -match 'text/csv|application/csv') {
  Move-Item -Force 'data\raw.bin' 'data\buylist.csv'
} elseif ($ctype -match 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream') {
  Move-Item -Force 'data\raw.bin' 'data\buylist.xlsx'
} else {
  $fs = [System.IO.File]::OpenRead('data\raw.bin'); try { $b = $fs.ReadByte() } finally { $fs.Dispose() }
  if ($b -eq 123) { Move-Item -Force 'data\raw.bin' 'data\items.json' } else { Move-Item -Force 'data\raw.bin' 'data\buylist.xlsx' }
}
'@

          Set-Content -Encoding ASCII -LiteralPath .\fetch.ps1 -Value $script
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
          & .\fetch.ps1 -Url $env:POS_FILE_URL -Cookie $env:POS_COOKIE -AuthHeader $env:POS_AUTH_HEADER -CsrfHeader $env:POS_X_CSRF_HEADER

          Get-ChildItem data

      # ===== JSON → CSV 変換（必要時） =====
      - name: Convert JSON to CSV (generic)
        if: ${{ hashFiles('data/items.json') != '' }}
        run: |
          $code = @'
          import json, pandas as pd
          from pandas import json_normalize
          import pathlib
          p = pathlib.Path("data/items.json")
          data = json.load(p.open(encoding="utf-8"))
          if isinstance(data, dict):
              for key in ("items","data","products","result","value"):
                  if key in data and isinstance(data[key], list):
                      data = data[key]; break
          if not isinstance(data, list):
              data = [data]
          df = json_normalize(data, sep=".")
          df.to_csv("data/buylist.csv", index=False, encoding="utf-8")
          print("Wrote data/buylist.csv rows=%d cols=%d" % (len(df), len(df.columns)))
          '@
          $code | Set-Content -Encoding UTF8 .\convert_json_to_csv.py
          python .\convert_json_to_csv.py
          Get-ChildItem data

      # ===== 静的ページ生成（あなたの gen_buylist.py を使用） =====
      - name: Build static pages
        env:
          OUT_DIR: docs
          PER_PAGE: "80"
          BUILD_THUMBS: "0"
        run: |
          $candidates = @("data\buylist.xlsx","data\buylist.csv","buylist.xlsx","buylist.csv")
          $input = $null
          foreach ($p in $candidates) { if (Test-Path $p) { $input = $p; break } }
          if (-not $input) { throw "入力データがありません（POS取得失敗 & リポジトリにも無い）" }
          python gen_buylist.py $input

      # ===== docs/ をコミットして公開 =====
      - name: Commit & push docs
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A docs
          if (git diff --cached --quiet) {
            Write-Host "No changes in docs/"
          } else {
            git commit -m "update buylist (auto)"
            git push
          }

      # ===== 失敗時調査用アーティファクト =====
      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pos-debug
          path: |
            data/headers.txt
            data/error_body.bin
