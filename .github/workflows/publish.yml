name: Build & Publish buylist (Self-hosted Runner)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

permissions:
  contents: write

concurrency:
  group: buylist-publish
  cancel-in-progress: true

jobs:
  build:
    runs-on: [self-hosted, local]

    defaults:
      run:
        shell: powershell

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl pillow requests

      # ===== POS から取得（PowerShell 5.1 / 文字列最小） =====
      - name: Fetch from POS (simple + sanitize + debug)
        env:
          POS_FILE_URL:       ${{ secrets.POS_FILE_URL }}
          POS_COOKIE:         ${{ secrets.POS_COOKIE }}
          POS_AUTH_HEADER:    ${{ secrets.POS_AUTH_HEADER }}
          POS_X_CSRF_HEADER:  ${{ secrets.POS_X_CSRF_HEADER }}
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Force -Path data | Out-Null

          # Sanitize URL/Cookie
          $url = $env:POS_FILE_URL
          if (-not $url) { throw 'POS_FILE_URL is empty' }
          $url = $url -replace '\r|\n',''
          $url = $url.Trim('"').Trim("'").Trim()
          $url = $url -replace '\^&','&' -replace '\^',''
          if ($url -notmatch '^https?://') { throw 'POS_FILE_URL must start with http/https' }

          $cookie = $env:POS_COOKIE
          if (-not $cookie) { $cookie = '' }
          $cookie = $cookie -replace '\r|\n',''

          # Mask secrets
          Write-Output ('::add-mask::' + $url)
          if ($cookie) { Write-Output ('::add-mask::' + $cookie) }
          if ($env:POS_AUTH_HEADER)   { Write-Output ('::add-mask::' + $env:POS_AUTH_HEADER) }
          if ($env:POS_X_CSRF_HEADER) { Write-Output ('::add-mask::' + $env:POS_X_CSRF_HEADER) }

          # Headers（最小構成）
          $headers = New-Object 'System.Collections.Generic.Dictionary[String,String]'
          $headers['User-Agent']      = 'Mozilla/5.0'
          $headers['Accept']          = '*/*'
          $headers['Accept-Language'] = 'ja,en-US;q=0.9,en;q=0.8'
          $headers['Content-Type']    = 'application/json'
          $headers['Referer']         = 'https://pos.mycalinks.com/'
          $headers['Origin']          = 'https://pos.mycalinks.com'
          if ($cookie) { $headers['Cookie'] = $cookie }

          function Add-KVHeader($line) {
            if ([string]::IsNullOrWhiteSpace($line)) { return }
            $ix = $line.IndexOf(':')
            if ($ix -gt 0) {
              $k = $line.Substring(0,$ix).Trim()
              $v = $line.Substring($ix+1).Trim()
              if ($k -and $v) { $headers[$k] = $v }
            }
          }
          Add-KVHeader $env:POS_AUTH_HEADER
          Add-KVHeader $env:POS_X_CSRF_HEADER

          # Fetch
          $code = 0
          try {
            $resp = Invoke-WebRequest -Uri $url -Headers $headers -Method GET -MaximumRedirection 5 -OutFile "data\raw.bin" -ErrorAction Stop
            if ($resp -and $resp.StatusCode) { $code = [int]$resp.StatusCode } else { $code = 200 }
            $ct = ''
            if ($resp -and $resp.Headers) { $ct = $resp.Headers['Content-Type'] }
            if (-not $ct) { $ct = '' }
            Set-Content -Encoding ASCII -Path "data\headers.txt" -Value ('content-type: ' + $ct)
          } catch {
            if ($_.Exception.Response) {
              $code = [int]$_.Exception.Response.StatusCode
              $ct = $_.Exception.Response.ContentType
              if (-not $ct) { $ct = '' }
              Set-Content -Encoding ASCII -Path "data\headers.txt" -Value ('content-type: ' + $ct)
              Copy-Item -Force "data\raw.bin" "data\error_body.bin" -ErrorAction SilentlyContinue
            } else { throw }
          }

          Write-Host ('HTTP ' + $code)
          if ($code -ne 200) { throw ('HTTP ' + $code + ' (check headers.txt / error_body.bin)') }

          # Save as .xlsx / .csv / .json by Content-Type or sniff
          $ctype = ''
          if (Test-Path "data\headers.txt") {
            $line = Get-Content "data\headers.txt" | Select-Object -Last 1
            $ctype = ($line -replace '^[^:]+:\s*','').ToLower().Split(';')[0]
          }
          if ($ctype -match 'application/json') {
            Move-Item -Force "data\raw.bin" "data\items.json"
          } elseif ($ctype -match 'text/csv|application/csv') {
            Move-Item -Force "data\raw.bin" "data\buylist.csv"
          } elseif ($ctype -match 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream') {
            Move-Item -Force "data\raw.bin" "data\buylist.xlsx"
          } else {
            $fs = [System.IO.File]::OpenRead("data\raw.bin")
            try { $b = $fs.ReadByte() } finally { $fs.Dispose() }
            if ($b -eq 123) { Move-Item -Force "data\raw.bin" "data\items.json" } else { Move-Item -Force "data\raw.bin" "data\buylist.xlsx" }
          }

          Get-ChildItem data

      # ===== JSON → CSV（必要時のみ） =====
      - name: Convert JSON to CSV (generic)
        if: ${{ hashFiles('data/items.json') != '' }}
        run: |
          $py = @'
          import json, pandas as pd
          from pandas import json_normalize
          import pathlib
          p = pathlib.Path("data/items.json")
          data = json.load(p.open(encoding="utf-8"))
          if isinstance(data, dict):
              for key in ("items","data","products","result","value"):
                  if key in data and isinstance(data[key], list):
                      data = data[key]; break
          if not isinstance(data, list):
              data = [data]
          df = json_normalize(data, sep=".")
          df.to_csv("data/buylist.csv", index=False, encoding="utf-8")
          print("Wrote data/buylist.csv rows=%d cols=%d" % (len(df), len(df.columns)))
          '@
          Set-Content -Encoding UTF8 -LiteralPath .\convert_json_to_csv.py -Value $py
          python .\convert_json_to_csv.py
          Get-ChildItem data

      # ===== 静的ページ生成（あなたの gen_buylist.py を使用） =====
      - name: Build static pages
        env:
          OUT_DIR: docs
          PER_PAGE: "80"
          BUILD_THUMBS: "0"
        run: |
          $candidates = @("data\buylist.xlsx","data\buylist.csv","buylist.xlsx","buylist.csv")
          $input = $null
          foreach ($p in $candidates) { if (Test-Path $p) { $input = $p; break } }
          if (-not $input) { throw "入力データがありません（POS取得失敗 & リポジトリにも無い）" }
          python gen_buylist.py $input

      - name: Commit & push docs
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A docs
          if (git diff --cached --quiet) {
            Write-Host "No changes in docs/"
          } else {
            git commit -m "update buylist (auto)"
            git push
          }

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pos-debug
          path: |
            data/headers.txt
            data/error_body.bin
