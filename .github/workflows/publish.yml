- name: Fetch from POS (robust + sanitize)
  id: fetch
  env:
    POS_FILE_URL:       ${{ secrets.POS_FILE_URL }}        # 例: https://pos.mycalinks.com/api/...（最終URL）
    POS_COOKIE:         ${{ secrets.POS_COOKIE }}          # DevTools→Network の Cookie を丸ごと1行
    POS_AUTH_HEADER:    ${{ secrets.POS_AUTH_HEADER }}     # 例: Authorization: Bearer xxxxx（任意）
    POS_X_CSRF_HEADER:  ${{ secrets.POS_X_CSRF_HEADER }}   # 例: x-csrf-token: abc123（任意）
  shell: bash
  run: |
    set -eux
    mkdir -p data

    # --- 1) URL/Cookie をサニタイズ（改行/CR・外側の引用符・Windowsの ^ を除去） ---
    URL_RAW="${POS_FILE_URL-}"
    URL="$(printf '%s' "$URL_RAW" | tr -d '\r\n')"                 # 改行除去
    URL="$(printf '%s' "$URL" | sed -e 's/^[[:space:]]\+//' -e 's/[[:space:]]\+$//')"   # 前後空白
    URL="${URL%\"}"; URL="${URL#\"}"; URL="${URL%\'}"; URL="${URL#\'}"                  # 外側の ' "
    URL="$(printf '%s' "$URL" | sed -e 's/\^&/\&/g' -e 's/\^//g')"                      # ^& → &、残りの ^ を削除

    COOKIE_RAW="${POS_COOKIE-}"
    COOKIE="$(printf '%s' "$COOKIE_RAW" | tr -d '\r\n')"           # 改行除去（Cookieは1行で）

    if ! printf '%s' "$URL" | grep -Eq '^https?://'; then
      echo "::error::POS_FILE_URL が不正です（http/https で始まっていません）。Secrets を確認してください。"
      exit 1
    fi

    # 秘匿値をマスク登録（ログに出さない）
    echo "::add-mask::$URL"
    echo "::add-mask::$COOKIE"
    [ -n "${POS_AUTH_HEADER-}" ]    && echo "::add-mask::${POS_AUTH_HEADER}"
    [ -n "${POS_X_CSRF_HEADER-}" ]  && echo "::add-mask::${POS_X_CSRF_HEADER}"

    # --- 2) ヘッダ準備（あるものだけ積む） ---
    UA="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 Chrome/139 Safari/537.36"
    H=()
    H+=(-H "User-Agent: ${UA}")
    H+=(-H "Accept: */*")
    H+=(-H "Accept-Language: ja,en-US;q=0.9,en;q=0.8")
    H+=(-H "Content-Type: application/json")
    H+=(-H "Referer: https://pos.mycalinks.com/")
    H+=(-H "Origin: https://pos.mycalinks.com")
    [ -n "${COOKIE}" ]              && H+=(-H "Cookie: ${COOKIE}")
    [ -n "${POS_AUTH_HEADER-}" ]    && H+=(-H "${POS_AUTH_HEADER}")
    [ -n "${POS_X_CSRF_HEADER-}" ]  && H+=(-H "${POS_X_CSRF_HEADER}")

    # --- 3) 取得（Content-Type 判定して保存ファイルを切り替え） ---
    curl -g -fL -sS -D data/headers.txt "${H[@]}" "$URL" -o data/raw.bin

    # Content-Type を小文字で取得（;以降はカット）
    ctype="$(grep -i '^content-type:' data/headers.txt | tail -1 | sed -E 's/^[^:]+:\s*//I' | tr '[:upper:]' '[:lower:]' | cut -d';' -f1 || true)"
    echo "Detected Content-Type: ${ctype:-unknown}"

    if echo "$ctype" | grep -q 'application/json'; then
      mv data/raw.bin data/items.json
    elif echo "$ctype" | grep -Eq 'application/(vnd\.openxmlformats-officedocument\.spreadsheetml\.sheet|octet-stream)'; then
      mv data/raw.bin data/buylist.xlsx
    elif echo "$ctype" | grep -Eq 'text/csv|application/csv'; then
      mv data/raw.bin data/buylist.csv
    else
      # 中身の先頭で最終判定（{ なら JSON、そうでなければ XLSX とみなす）
      if head -c 1 data/raw.bin | grep -q '{'; then
        mv data/raw.bin data/items.json
      else
        mv data/raw.bin data/buylist.xlsx
      fi
    fi

    ls -l data
