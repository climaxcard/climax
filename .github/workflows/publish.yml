name: Build & Publish buylist (Self-hosted Runner)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]

permissions:
  contents: write

concurrency:
  group: buylist-publish
  cancel-in-progress: true

jobs:
  build:
    runs-on: [self-hosted, local]

    # 既定のシェルを Windows PowerShell に
    defaults:
      run:
        shell: powershell

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas openpyxl pillow requests

      # ===== POSから取得（PowerShell 5.1 互換） =====
      - name: Fetch from POS (powershell, robust + sanitize + debug)
        id: fetch
        env:
          POS_FILE_URL:       ${{ secrets.POS_FILE_URL }}
          POS_COOKIE:         ${{ secrets.POS_COOKIE }}
          POS_AUTH_HEADER:    ${{ secrets.POS_AUTH_HEADER }}
          POS_X_CSRF_HEADER:  ${{ secrets.POS_X_CSRF_HEADER }}
        run: |
          $ErrorActionPreference = 'Stop'
          New-Item -ItemType Directory -Force -Path data | Out-Null

          # --- Sanitize URL/Cookie（改行/外側クォート/Windowsの ^ を除去） ---
          $url = $env:POS_FILE_URL
          if (-not $url) { $url = "" }
          $url = $url -replace "`r|`n",""
          $url = $url.Trim('"').Trim("'").Trim()
          $url = $url -replace '\^&','&' -replace '\^',''
          if ($url -notmatch '^https?://') { throw "POS_FILE_URL が不正（http/httpsで始まっていない）" }

          $cookie = $env:POS_COOKIE
          if (-not $cookie) { $cookie = "" }
          $cookie = $cookie -replace "`r|`n",""

          # --- 秘密をマスク ---
          Write-Output "::add-mask::$url"
          if ($cookie) { Write-Output "::add-mask::$cookie" }
          if ($env:POS_AUTH_HEADER)   { Write-Output "::add-mask::$($env:POS_AUTH_HEADER)" }
          if ($env:POS_X_CSRF_HEADER) { Write-Output "::add-mask::$($env:POS_X_CSRF_HEADER)" }

          # --- ブラウザっぽいヘッダ ---
          $headers = @{
            "User-Agent"         = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
            "Accept"             = "*/*"
            "Accept-Language"    = "ja,en-US;q=0.9,en;q=0.8"
            "Content-Type"       = "application/json"
            "Referer"            = "https://pos.mycalinks.com/auth/item?genreId=137"
            "Origin"             = "https://pos.mycalinks.com"
            "Sec-Fetch-Dest"     = "empty"
            "Sec-Fetch-Mode"     = "cors"
            "Sec-Fetch-Site"     = "same-origin"
            "sec-ch-ua"          = 'Not;A=Brand";v="99", "Google Chrome";v="139", "Chromium";v="139"'
            "sec-ch-ua-mobile"   = "?0"
            "sec-ch-ua-platform" = "Windows"
            "X-Requested-With"   = "XMLHttpRequest"
          }
          if ($cookie) { $headers["Cookie"] = $cookie }
          if ($env:POS_AUTH_HEADER) {
            $parts = $env:POS_AUTH_HEADER.Split(":",2)
            if ($parts.Count -eq 2) { $headers[$parts[0].Trim()] = $parts[1].Trim() }
          }
          if ($env:POS_X_CSRF_HEADER) {
            $parts = $env:POS_X_CSRF_HEADER.Split(":",2)
            if ($parts.Count -eq 2) { $headers[$parts[0].Trim()] = $parts[1].Trim() }
          }

          # --- 取得：成功/失敗でも headers/body を保存 ---
          $code = 0
          try {
            $resp = Invoke-WebRequest -Uri $url -Headers $headers -Method GET -MaximumRedirection 5 -OutFile data/raw.bin -ErrorAction Stop
            if ($resp -and $resp.StatusCode) { $code = [int]$resp.StatusCode } else { $code = 200 }
            if ($resp -and $resp.Headers) {
              $resp.Headers.GetEnumerator() | ForEach-Object { "$($_.Key): $($_.Value)" } | Set-Content -Encoding ASCII data/headers.txt
            } else {
              "content-type: application/octet-stream" | Set-Content -Encoding ASCII data/headers.txt
            }
          } catch {
            if ($_.Exception.Response) {
              $response = [System.Net.HttpWebResponse]$_.Exception.Response
              $code = [int]$response.StatusCode
              $response.Headers.GetEnumerator() | ForEach-Object { "$($_.Key): $($_.Value)" } | Set-Content -Encoding ASCII data/headers.txt
              Copy-Item -Force data/raw.bin data/error_body.bin -ErrorAction SilentlyContinue
            } else { throw }
          }

          "HTTP $code" | Write-Host
          Get-Content data/headers.txt -TotalCount 50 -EA SilentlyContinue | Write-Host

          if ($code -ne 200) { throw "HTTP $code（Cookie期限切れ/WAFの可能性）。headers.txt / error_body.bin を確認。" }

          # --- Content-Type で保存名を振り分け ---
          $ctypeLine = Get-Content data/headers.txt | Where-Object { $_ -match '^[Cc]ontent-[Tt]ype:' } | Select-Object -Last 1
          $ctype = ""
          if ($ctypeLine) { $ctype = ($ctypeLine -replace '^[^:]+:\s*','').ToLower().Split(';')[0] }

          if ($ctype -match 'application/json') {
            Move-Item -Force data/raw.bin data/items.json
          } elseif ($ctype -match 'application/(vnd\.openxmlformats\-officedocument\.spreadsheetml\.sheet|octet-stream)') {
            Move-Item -Force data/raw.bin data/buylist.xlsx
          } elseif ($ctype -match 'text/csv|application/csv') {
            Move-Item -Force data/raw.bin data/buylist.csv
          } else {
            $bytes = [System.IO.File]::ReadAllBytes("data\raw.bin")
            if ($bytes.Length -gt 0 -and $bytes[0] -eq 123) { # '{'
              Move-Item -Force data/raw.bin data/items.json
            } else {
              Move-Item -Force data/raw.bin data/buylist.xlsx
            }
          }

          Get-ChildItem data

      - name: Convert JSON to CSV (generic)
        if: ${{ hashFiles('data/items.json') != '' }}
        run: |
          $code = @'
          import json, pandas as pd
          from pandas import json_normalize
          import pathlib
          p = pathlib.Path("data/items.json")
          data = json.load(p.open(encoding="utf-8"))
          if isinstance(data, dict):
              for key in ("items","data","products","result","value"):
                  if key in data and isinstance(data[key], list):
                      data = data[key]; break
          if not isinstance(data, list):
              data = [data]
          df = json_normalize(data, sep=".")
          df.to_csv("data/buylist.csv", index=False, encoding="utf-8")
          print("Wrote data/buylist.csv rows=%d cols=%d" % (len(df), len(df.columns)))
          '@
          $code | Set-Content -Encoding UTF8 .\convert_json_to_csv.py
          python .\convert_json_to_csv.py
          Get-ChildItem data

      - name: Build static pages
        env:
          OUT_DIR: docs
          PER_PAGE: "80"
          BUILD_THUMBS: "0"
        run: |
          $candidates = @("data\buylist.xlsx","data\buylist.csv","buylist.xlsx","buylist.csv")
          $input = $null
          foreach ($p in $candidates) { if (Test-Path $p) { $input = $p; break } }
          if (-not $input) { throw "入力データがありません（POS取得失敗 & リポジトリにも無い）" }
          python gen_buylist.py $input

      - name: Commit & push docs
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A docs
          if (git diff --cached --quiet) {
            Write-Host "No changes in docs/"
          } else {
            git commit -m "update buylist (auto)"
            git push
          }

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pos-debug
          path: |
            data/headers.txt
            data/error_body.bin
