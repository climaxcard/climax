# -*- coding: utf-8 -*-
"""
完全オフライン対応（fetch不使用）・</script>崩れ対策済み
- 各ページに全件JSONを同梱して検索/並び替え/ページング
- 画像ON/OFF切替、ライトボックス
- ヘッダー：左ロゴ／中央タイトル（常に中央）／右 Shop・Login
- defaultモードはタイトルから「（default）」を非表示
"""

from pathlib import Path
from urllib.parse import urlparse, parse_qs
import pandas as pd
import html as html_mod
import unicodedata as ud
import math, base64, mimetypes

# ========= 設定 =========
EXCEL_PATH = r"C:\Users\user\Downloads\WEB買取表_I列_画像URL_cardimage.xlsx"
SHEET_NAME = "シート1"
PER_PAGE = 50
OUT_DIR = Path("buylist_pages_offline")

# ロゴ：どちらか使える方を指定（優先順: URL -> PATH）
LOGO_PATH = Path("./logo.png")      # 実行前に同階層へ配置でOK
LOGO_URL  = ""                      # 例: "https://.../logo.png" or data URI

# 列番号（0始まり想定）
COL_NAME = 1
COL_PACK = 2
COL_CODE = 3
COL_RARITY = 4
COL_BOOST = 5
COL_PRICE = 7
COL_IMGURL = 8

# ========= 入力 =========
try:
    df_raw = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME, header=None, engine="openpyxl")
except Exception:
    xls = pd.ExcelFile(EXCEL_PATH, engine="openpyxl")
    df_raw = pd.read_excel(xls, sheet_name=xls.sheet_names[0], header=None, engine="openpyxl")

# ========= ユーティリティ =========
def clean_text(s: pd.Series) -> pd.Series:
    s = s.astype(str)
    s = s.str.replace(r'(?i)^\s*nan\s*$', '', regex=True)
    s = s.replace({"nan":"","NaN":"","None":"","NONE":"","null":"","NULL":"","nil":"","NIL":""})
    return s.fillna("").str.strip()

def to_int_series(s: pd.Series) -> pd.Series:
    if pd.api.types.is_numeric_dtype(s):
        return pd.to_numeric(s, errors="coerce").round().astype("Int64")
    s = s.astype(str).str.replace(r"[^\d\.\-,]", "", regex=True).str.replace(",", "", regex=False)
    return pd.to_numeric(s, errors="coerce").round().astype("Int64")

def detail_to_img(url: str) -> str:
    if not isinstance(url, str) or not url: return ""
    if "cardimage" in url: return url
    if "id=" in url:
        parsed = urlparse(url); from urllib.parse import parse_qs
        qs = parse_qs(parsed.query)
        id_val = qs.get("id", [parsed.path.split("/")[-1]])[0]
        return f"https://dm.takaratomy.co.jp/wp-content/card/cardimage/{id_val}.jpg"
    return url if url.startswith("http") else ""

def nfkc_lower(s: str) -> str:
    return ud.normalize("NFKC", s or "").lower()

def kata_to_hira(text: str) -> str:
    return "".join(chr(ord(ch) - 0x60) if "ァ" <= ch <= "ン" else ch for ch in text)

def searchable_row(row: pd.Series) -> str:
    return " ".join(kata_to_hira(nfkc_lower(str(row.get(k, ""))))
                    for k in ("name","code","pack","rarity","booster"))

def esc(x):
    import pandas as _pd
    return html_mod.escape("" if _pd.isna(x) else str(x))

def logo_src(path: Path, url: str) -> str:
    # URL優先
    if url and (url.startswith("http") or url.startswith("data:")):
        return url
    try:
        if path and path.exists():
            mime = mimetypes.guess_type(str(path))[0] or "image/png"
            b64  = base64.b64encode(path.read_bytes()).decode("ascii")
            return f"data:{mime};base64,{b64}"
    except Exception:
        pass
    return ""

# ========= データ =========
df = pd.DataFrame({
    "name":    clean_text(df_raw.iloc[:, COL_NAME] if COL_NAME  < df_raw.shape[1] else ""),
    "pack":    clean_text(df_raw.iloc[:, COL_PACK] if COL_PACK  < df_raw.shape[1] else ""),
    "code":    clean_text(df_raw.iloc[:, COL_CODE] if COL_CODE  < df_raw.shape[1] else ""),
    "rarity":  clean_text(df_raw.iloc[:, COL_RARITY] if COL_RARITY< df_raw.shape[1] else ""),
    "booster": clean_text(df_raw.iloc[:, COL_BOOST] if COL_BOOST< df_raw.shape[1] else ""),
    "price":   to_int_series(df_raw.iloc[:, COL_PRICE] if COL_PRICE< df_raw.shape[1] else 0),
    "image":   clean_text(df_raw.iloc[:, COL_IMGURL] if COL_IMGURL< df_raw.shape[1] else "").map(detail_to_img),
})
df = df[~df["name"].str.match(r"^Unnamed", na=False)]
df = df[df["name"].str.strip()!=""].reset_index(drop=True)
df["_s"] = df.apply(searchable_row, axis=1)

# ========= 見た目 =========
base_css = """
*{box-sizing:border-box}
body{margin:0;background:#0a0e17;color:#e8ecf1;font-family:Inter,system-ui,'Noto Sans JP',sans-serif}
header{position:sticky;top:0;z-index:8;background:#0a0e17dd;backdrop-filter:blur(6px);border-bottom:1px solid #222;padding:6px 12px}
.header-wrap{
  max-width:1100px;margin:0 auto;
  display:grid;grid-template-columns:1fr auto 1fr;align-items:center;gap:10px;width:100%;
}
.brand-left{display:flex;align-items:center;gap:10px;min-width:0;justify-self:start}
.brand-left img{height:42px;display:block}
.center-ttl{justify-self:center;font-weight:800;white-space:nowrap;font-size:18px}
.actions{display:flex;align-items:center;gap:8px;justify-self:end}
.iconbtn{display:inline-flex;align-items:center;gap:6px;border:1px solid #2a2f3a;background:#1a2030;color:#e8ecf1;border-radius:10px;padding:8px 10px;text-decoration:none;font-size:13px}
.iconbtn:hover{filter:brightness(1.1)}
.iconbtn svg{width:16px;height:16px;display:block}

/* 検索UI */
.controls{
  display:grid;
  grid-template-columns:repeat(4, minmax(140px,1fr));
  grid-template-areas:"q1 q2 q3 q4" "acts acts acts acts";
  gap:8px;margin:6px 0 10px;align-items:center;
}
.controls #nameQ   { grid-area:q1 }
.controls #codeQ   { grid-area:q2 }
.controls #packQ   { grid-area:q3 }
.controls #rarityQ { grid-area:q4 }
.controls .btns    { grid-area:acts; display:flex; gap:6px; flex-wrap:wrap }
input.search{background:#151922;border:1px solid #2a2f3a;color:#e8ecf1;border-radius:10px;padding:10px 12px;font-size:14px;outline:none;min-width:120px}
.btn{background:#1a2030;border:1px solid #2a2f3a;color:#e8ecf1;border-radius:10px;padding:8px 10px;font-size:13px;cursor:pointer;text-decoration:none;white-space:nowrap}
.btn:hover{filter:brightness(1.1)}
.btn.active{outline:2px solid #ff3b3b}
.wrap{max-width:1100px;margin:0 auto;padding:10px}

/* カード */
.grid{margin:12px 0;width:100%}
.grid.grid-img{display:grid;grid-template-columns:repeat(5, minmax(0,1fr));gap:6px}
.grid.grid-list{display:grid;grid-template-columns:repeat(2, minmax(0,1fr));gap:8px}
.card{background:#171a21;border:1px solid #ff3b3b55;border-radius:12px;overflow:hidden;box-shadow:0 0 8px #ff3b3b33}
.card:hover{box-shadow:0 0 12px #ff3b3b66}
.th{aspect-ratio:3/4;background:#0a0c10;cursor:zoom-in}
.th img{width:100%;height:100%;object-fit:cover;display:block;background:#111}
.b{padding:8px 10px}
.n{font-size:13px;font-weight:700;line-height:1.35;margin:0 0 4px}
.meta{font-size:11px;color:#9aa3af;word-break:break-word}
.p{margin-top:6px;font-size:12px}
.mx{font-weight:900;color:#ff3b3b;font-size:20px}

/* スマホ */
@media (max-width:600px){
  .brand-left img{height:34px}
  .center-ttl{font-size:16px}
  .wrap{max-width:none;width:100%;margin:0 auto;
    padding-left:max(8px, env(safe-area-inset-left));
    padding-right:max(8px, env(safe-area-inset-right))}
  .controls{grid-template-columns:1fr;grid-template-areas:"q1" "q2" "q3" "q4" "acts"}
  .b{padding:6px}.n{font-size:11px}.mx{font-size:14px}
}

nav.simple{display:flex;justify-content:center;align-items:center;margin:10px 0;gap:10px;flex-wrap:wrap}
nav.simple a{color:#fff;background:#1a2030;border:1px solid #2a2f3a;padding:6px 12px;border-radius:10px;text-decoration:none;white-space:nowrap}
nav.simple a.disabled{opacity:.4;pointer-events:none}
nav.simple strong{color:#ff3b3b;user-select:none}
small.note{color:#9aa3af}

/* ライトボックス */
.viewer{position:fixed;inset:0;background:rgba(0,0,0,.86);display:none;align-items:center;justify-content:center;z-index:50}
.viewer.show{display:flex}
.viewer .vc{position:relative;max-width:92vw;max-height:92vh}
.viewer img{max-width:92vw;max-height:92vh;display:block}
.viewer button.close{position:absolute;top:-12px;right:-12px;background:#1a2030;border:1px solid #2a2f3a;color:#e8ecf1;border-radius:999px;width:36px;height:36px;cursor:pointer}
"""

# ========= JS =========
base_js = r"""
(function(){
  const nameQ  = document.getElementById('nameQ');
  const codeQ  = document.getElementById('codeQ');
  const packQ  = document.getElementById('packQ');
  const rarityQ= document.getElementById('rarityQ');
  const grid   = document.getElementById('grid');
  const navs   = [...document.querySelectorAll('nav.simple')];

  const btnDesc  = document.getElementById('btnPriceDesc');
  const btnAsc   = document.getElementById('btnPriceAsc');
  const btnNone  = document.getElementById('btnSortClear');
  const btnImg   = document.getElementById('btnToggleImages');

  const viewer = document.getElementById('viewer');
  const viewerImg = document.getElementById('viewerImg');
  const viewerClose = document.getElementById('viewerClose');

  let ALL=[];
  try{ const tag=document.getElementById('cardsData'); ALL = JSON.parse(tag?.textContent || '[]'); if(!Array.isArray(ALL)) ALL=[]; }catch(e){ ALL=[]; }

  function kataToHira(str){ return (str||'').replace(/[\u30A1-\u30F6]/g, ch => String.fromCharCode(ch.charCodeAt(0)-0x60)); }
  const kanjiReadingMap={"伝説":"でんせつ"};
  function convertKanjiToReading(str){ for(const [k,v] of Object.entries(kanjiReadingMap)) str=str.split(k).join(v); return str; }
  function normalizeForSearch(s){ return kataToHira((s||'').normalize('NFKC').toLowerCase()); }
  function fmtYen(n){ return (n==null||n==='')?'-':('¥'+parseInt(n,10).toLocaleString()); }
  function escHtml(s){ return (s||'').replace(/[&<>\"']/g, m=>({"&":"&amp;","<":"&lt;",">":"&gt;","\"":"&quot;","'":"&#39;"}[m])); }

  let VIEW=[]; let page=1; const PER_PAGE=__PER_PAGE__;
  let currentSort=__INITIAL_SORT__;
  let showImages = (localStorage.getItem('showImages') ?? '1') === '1';

  function cardHTML_img(it){
    const nameEsc = escHtml(it.name||'');
    const img = it.image?it.image:'';
    return `
  <article class="card">
    <div class="th" data-full="${img}"><img loading="lazy" src="${img}" alt="${nameEsc}"></div>
    <div class="b">
      <h3 class="n">${nameEsc}</h3>
      <div class="p"><span class="mx">${fmtYen(it.price)}</span></div>
    </div>
  </article>`;
  }
  function cardHTML_list(it){
    const nameEsc = escHtml(it.name||'');
    const meta = [it.code||'', [it.pack||'', it.booster||''].filter(Boolean).join(' / ')].filter(Boolean).join(' ・ ');
    return `
  <article class="card">
    <div class="b">
      <h3 class="n">${nameEsc}</h3>
      <div class="meta">${escHtml(meta)}</div>
      <div class="p"><span class="mx">${fmtYen(it.price)}</span></div>
    </div>
  </article>`;
  }

  function render(){
    grid.className = showImages ? 'grid grid-img' : 'grid grid-list';
    const total=VIEW.length; const pages=Math.max(1, Math.ceil(total/PER_PAGE)); if(page>pages) page=pages;
    const start=(page-1)*PER_PAGE; const rows=VIEW.slice(start, start+PER_PAGE);
    grid.innerHTML = rows.map(showImages ? cardHTML_img : cardHTML_list).join('');

    if(showImages){
      grid.querySelectorAll('.th').forEach(th=>{
        th.addEventListener('click', ()=>{
          const src = th.getAttribute('data-full') || th.querySelector('img')?.src || '';
          if(!src) return;
          viewerImg.src = src;
          viewer.classList.add('show');
        });
      });
    }

    const prev = page>1 ? `<a href="#" data-jump="prev">← 前のページ</a>` : `<a class="disabled">← 前のページ</a>`;
    const next = page<pages ? `<a href="#" data-jump="next">次のページ →</a>` : `<a class="disabled">次のページ →</a>`;
    const navHtml = `${prev} &nbsp;&nbsp; <strong>${page}/${pages}</strong> &nbsp;&nbsp; ${next}`;
    navs.forEach(n=>{
      n.innerHTML=navHtml;
      n.onclick=(e)=>{ const a=e.target.closest('a[data-jump]'); if(!a) return; e.preventDefault(); const j=a.dataset.jump; if(j==='prev') page--; else if(j==='next') page++; render(); };
    });
  }

  function apply(){
    const kwName   = convertKanjiToReading(normalizeForSearch(nameQ.value||''));
    const kwCode   = convertKanjiToReading(normalizeForSearch(codeQ.value||''));
    const kwPack   = convertKanjiToReading(normalizeForSearch(packQ.value||''));
    const kwRarity = convertKanjiToReading(normalizeForSearch(rarityQ.value||''));

    VIEW = ALL.filter(it=>{
      const sName   = convertKanjiToReading(normalizeForSearch(it.name||''));
      const sCode   = convertKanjiToReading(normalizeForSearch(it.code||''));
      const sPackBooster = convertKanjiToReading(normalizeForSearch([it.pack||'', it.booster||''].join(' ')));
      const sRarity = convertKanjiToReading(normalizeForSearch(it.rarity||''));
      return (!kwName   || sName.includes(kwName))
          && (!kwCode   || sCode.includes(kwCode))
          && (!kwPack   || sPackBooster.includes(kwPack))
          && (!kwRarity || sRarity.includes(kwRarity));
    });

    if(currentSort==='desc') VIEW.sort((a,b)=>(b.price||0)-(a.price||0));
    else if(currentSort==='asc') VIEW.sort((a,b)=>(a.price||0)-(b.price||0));

    page=1; render();
  }

  function setActiveSort(){
    btnDesc.classList.toggle('active', currentSort==='desc');
    btnAsc .classList.toggle('active', currentSort==='asc');
    btnNone.classList.toggle('active', currentSort===null);
  }
  function setImgBtn(){
    btnImg.textContent = showImages ? '画像OFF' : '画像ON';
    btnImg.classList.toggle('active', showImages);
  }

  btnDesc?.addEventListener('click', ()=>{ currentSort = (currentSort==='desc') ? null : 'desc'; setActiveSort(); apply(); });
  btnAsc ?.addEventListener('click', ()=>{ currentSort = (currentSort==='asc') ? null : 'asc'; setActiveSort(); apply(); });
  btnNone?.addEventListener('click', ()=>{ currentSort = null; setActiveSort(); apply(); });

  btnImg?.addEventListener('click', ()=>{ showImages = !showImages; localStorage.setItem('showImages', showImages ? '1' : '0'); setImgBtn(); render(); });

  function onInputDebounced(el){ el.addEventListener('input', ()=>{ clearTimeout(el._t); el._t=setTimeout(apply,120); }); }
  [nameQ, codeQ, packQ, rarityQ].forEach(onInputDebounced);

  function closeViewer(){ viewer.classList.remove('show'); viewerImg.src=''; }
  viewerClose?.addEventListener('click', closeViewer);
  viewer?.addEventListener('click', (e)=>{ if(e.target===viewer) closeViewer(); });
  window.addEventListener('keydown', (e)=>{ if(e.key==='Escape') closeViewer(); });

  setActiveSort(); setImgBtn(); apply();
})();
"""

# ===== JSON埋め込み =====
def json_for_embed(df: pd.DataFrame) -> str:
    txt = df[["name","pack","code","rarity","booster","price","image","_s"]].to_json(force_ascii=False, orient="records")
    return txt.replace("</", "<\\/").replace("\u2028", "\\u2028").replace("\u2029", "\\u2029")

def html_page(title: str, inline_json: str, js_source: str, logo_uri: str) -> str:
    shop_svg = "<svg viewBox='0 0 24 24' aria-hidden='true'><path d='M6 6h12l1 4H5l1-4zm-1 6h14v7H5v-7zm3 0v7m8-7v7M9 3h6l1 3H8l1-3z' fill='currentColor'/></svg>"
    login_svg= "<svg viewBox='0 0 24 24' aria-hidden='true'><path d='M12 12a5 5 0 1 0-5-5 5 5 0 0 0 5 5zm0 2c-4.418 0-8 2.239-8 5v2h16v-2c0-2.761-3.582-5-8-5z' fill='currentColor'/></svg>"

    parts = []
    parts.append("<!doctype html><html lang='ja'><head><meta charset='utf-8'>")
    parts.append("<meta name='viewport' content='width=device-width,initial-scale=1'>")
    parts.append("<style>"); parts.append(base_css); parts.append("</style></head><body>")

    parts.append("<header><div class='header-wrap'>")
    parts.append("<div class='brand-left'>")
    if logo_uri: parts.append(f"<img src='{logo_uri}' alt='CLIMAX ロゴ'>")
    parts.append("</div>")
    parts.append(f"<div class='center-ttl'>{html_mod.escape(title)}</div>")
    parts.append("<div class='actions'>")
    parts.append(f"<a class='iconbtn' href='https://www.climax-card.jp/' target='_blank' rel='noopener'>{shop_svg}<span>Shop</span></a>")
    parts.append(f"<a class='iconbtn' href='https://www.climax-card.jp/member-login' target='_blank' rel='noopener'>{login_svg}<span>Login</span></a>")
    parts.append("</div></div></header>")

    parts.append("<main class='wrap'>")
    parts.append("<div class='controls'>")
    parts.append("  <input id='nameQ'   class='search' placeholder='名前：部分一致（ひらがな可）'>")
    parts.append("  <input id='codeQ'   class='search' placeholder='型番：例: SP4/SP5, 19/100 等'>")
    parts.append("  <input id='packQ'   class='search' placeholder='弾：例: DMEX-01、邪神VS邪神 等'>")
    parts.append("  <input id='rarityQ' class='search' placeholder='レアリティ：SR/VR 等'>")
    parts.append("  <div class='btns'>")
    parts.append("    <button id='btnPriceDesc' class='btn'>価格高い順</button>")
    parts.append("    <button id='btnPriceAsc'  class='btn'>価格低い順</button>")
    parts.append("    <button id='btnSortClear' class='btn'>標準順</button>")
    parts.append("    <button id='btnToggleImages' class='btn'>画像ON</button>")
    parts.append("  </div></div>")
    parts.append("  <nav class='simple'></nav><div id='grid' class='grid grid-img'></div><nav class='simple'></nav>")
    parts.append("  <small class='note'>完全オフライン対応：各ページ内の全件データのみで検索・並び替え・ページング。画像クリックで拡大表示。</small>")
    parts.append("</main>")
    parts.append(f"<script id='cardsData' type='application/json'>{inline_json}</script>")
    parts.append("<div id='viewer' class='viewer'><div class='vc'><img id='viewerImg' alt=''><button id='viewerClose' class='close'>×</button></div></div>")
    parts.append("<script>"); parts.append(js_source); parts.append("</script></body></html>")
    return "".join(parts)

# ========= 出力 =========
OUT_DIR.mkdir(parents=True, exist_ok=True)
inline_json_safe = json_for_embed(df)
logo_uri = logo_src(LOGO_PATH, LOGO_URL)

def write_mode(dir_name: str, initial_sort_js_literal: str, title_text: str):
    sub = OUT_DIR / dir_name
    sub.mkdir(parents=True, exist_ok=True)
    js = base_js.replace("__PER_PAGE__", str(PER_PAGE)).replace("__INITIAL_SORT__", initial_sort_js_literal)
    total = len(df)
    pages = max(1, math.ceil(total/PER_PAGE))
    for p in range(1, pages+1):
        html = html_page(title_text, inline_json_safe, js, logo_uri)
        (sub / f"p{p}.html").write_text(html, encoding="utf-8")
    (sub / "index.html").write_text("<meta http-equiv='refresh' content='0; url=p1.html'>", encoding="utf-8")

# default は「（default）」を表示しない
write_mode("default", "null", "デュエマ買取表")
write_mode("price_desc", "'desc'", "デュエマ買取表（price_desc）")
write_mode("price_asc", "'asc'", "デュエマ買取表（price_asc）")

ALL = OUT_DIR / "all"
ALL.mkdir(parents=True, exist_ok=True)
js_all = base_js.replace("__PER_PAGE__", str(PER_PAGE)).replace("__INITIAL_SORT__", "null")
all_html = html_page("デュエマ買取表（全件検索）", inline_json_safe, js_all, logo_uri)
(ALL / "index.html").write_text(all_html, encoding="utf-8")

(OUT_DIR / "index.html").write_text("<meta http-equiv='refresh' content='0; url=default/p1.html'>", encoding="utf-8")

print(f"[OK] 生成完了 → {OUT_DIR.resolve()}\n  - 完全オフライン対応\n  - モード: default / price_desc / price_asc / all\n  - 1ページあたり: {PER_PAGE} 件")
